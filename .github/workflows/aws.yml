name: Deploy Django to ECS

on:
  push:
    branches:
      - main

jobs:
  build_dev:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Docker registry
        run: |
          aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 730335599886.dkr.ecr.ap-south-1.amazonaws.com
      
      - name: Build and push Docker image
        env:
          ECS_CLUSTER: flask-test
          ECS_SERVICE: flask-new
          IMAGE_TAG: latest
        run: |
          docker pull 730335599886.dkr.ecr.ap-south-1.amazonaws.com/flask-test:latest || echo "No latest image found"
          docker tag 730335599886.dkr.ecr.ap-south-1.amazonaws.com/flask-test:latest 730335599886.dkr.ecr.ap-south-1.amazonaws.com/flask-test:stable || echo "No latest image to tag"
          docker push 730335599886.dkr.ecr.ap-south-1.amazonaws.com/flask-test:stable || echo "No new version tag to push"
          docker build -t flask-test:latest .
          docker tag flask-test:latest 730335599886.dkr.ecr.ap-south-1.amazonaws.com/flask-test:latest
          docker push 730335599886.dkr.ecr.ap-south-1.amazonaws.com/flask-test:latest
          echo "${{ secrets.ENV_FILE }}" | base64 --decode > .env
          ENV_VARS=$(cat .env | jq -Rs 'split("\n") | map(select(length > 0)) | map(split("=") | {name: .[0], value: .[1]})')
          cat <<EOT > task-definition-dev.json
          {
            "family": "flask-test",
            "containerDefinitions": [
             {
            "name": "flask",
            "image": "730335599886.dkr.ecr.ap-south-1.amazonaws.com/flask-test:latest",
            "cpu": 0,
            "portMappings": [
                {
                    "name": "container-port",
                    "containerPort": 3000,
                    "hostPort": 0,
                    "protocol": "tcp",
                    "appProtocol": "http"
                }
            ],
            "essential": true,
            "environment": $ENV_VARS,
            "environmentFiles": [],
            "mountPoints": [],
            "volumesFrom": [],
            "ulimits": [],
            "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                    "awslogs-group": "/ecs/flask-test",
                    "awslogs-create-group": "true",
                    "awslogs-region": "ap-south-1",
                    "awslogs-stream-prefix": "ecs"
                },
                "secretOptions": []
            },
            "systemControls": []
             }
            ],
           "taskRoleArn": "arn:aws:iam::730335599886:role/ecsTaskExecutionRole",
           "executionRoleArn": "arn:aws:iam::730335599886:role/ecsTaskExecutionRole",
           "networkMode": "bridge",
           "requiresCompatibilities": [
                       "EC2"
                     ],
            "cpu": "256",
            "memory": "256",
            "runtimePlatform": {
            "cpuArchitecture": "X86_64",
            "operatingSystemFamily": "LINUX"
                }
           }
          EOT

          aws ecs register-task-definition --cli-input-json file://task-definition-dev.json
          
      - name: Update ECS service
        env:
          ECS_CLUSTER: flask-test
          ECS_SERVICE: flask-new
          IMAGE_TAG: latest
        run: |
          TASK_DEFINITION_ARN=$(aws ecs describe-task-definition --task-definition flask-test | jq -r '.taskDefinition.taskDefinitionArn')
          aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force-new-deployment --region ap-south-1 --desired-count 1 --task-definition $TASK_DEFINITION_ARN 

          rm -rf task-definition-dev.json
